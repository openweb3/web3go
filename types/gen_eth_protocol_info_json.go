// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*ethProtocolInfoMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e EthProtocolInfo) MarshalJSON() ([]byte, error) {
	type EthProtocolInfo struct {
		Version    uint32       `json:"version"`
		Difficulty *hexutil.Big `json:"difficulty"`
		Head       string       `json:"head"`
	}
	var enc EthProtocolInfo
	enc.Version = e.Version
	enc.Difficulty = (*hexutil.Big)(e.Difficulty)
	enc.Head = e.Head
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *EthProtocolInfo) UnmarshalJSON(input []byte) error {
	type EthProtocolInfo struct {
		Version    *uint32      `json:"version"`
		Difficulty *hexutil.Big `json:"difficulty"`
		Head       *string      `json:"head"`
	}
	var dec EthProtocolInfo
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Version != nil {
		e.Version = *dec.Version
	}
	if dec.Difficulty != nil {
		e.Difficulty = (*big.Int)(dec.Difficulty)
	}
	if dec.Head != nil {
		e.Head = *dec.Head
	}
	return nil
}
