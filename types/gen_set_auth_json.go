// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*setAuthMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SetAuth) MarshalJSON() ([]byte, error) {
	type SetAuth struct {
		Address common.Address  `json:"address"`
		ChainID *hexutil.Big    `json:"chainId"`
		Nonce   *hexutil.Big    `json:"nonce"`
		Author  *common.Address `json:"author,omitempty"`
	}
	var enc SetAuth
	enc.Address = s.Address
	enc.ChainID = (*hexutil.Big)(s.ChainID)
	enc.Nonce = (*hexutil.Big)(s.Nonce)
	enc.Author = s.Author
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SetAuth) UnmarshalJSON(input []byte) error {
	type SetAuth struct {
		Address *common.Address `json:"address"`
		ChainID *hexutil.Big    `json:"chainId"`
		Nonce   *hexutil.Big    `json:"nonce"`
		Author  *common.Address `json:"author,omitempty"`
	}
	var dec SetAuth
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address != nil {
		s.Address = *dec.Address
	}
	if dec.ChainID != nil {
		s.ChainID = (*big.Int)(dec.ChainID)
	}
	if dec.Nonce != nil {
		s.Nonce = (*big.Int)(dec.Nonce)
	}
	if dec.Author != nil {
		s.Author = dec.Author
	}
	return nil
}
