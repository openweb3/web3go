// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*blockMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b Block) MarshalJSON() ([]byte, error) {
	type Block struct {
		BaseFeePerGas    *hexutil.Big      `json:"baseFeePerGas,omitempty"`
		Difficulty       *hexutil.Big      `json:"difficulty"     gencodec:"required"`
		ExtraData        hexutil.Bytes     `json:"extraData"`
		GasLimit         hexutil.Uint64    `json:"gasLimit"`
		GasUsed          hexutil.Uint64    `json:"gasUsed"`
		Hash             common.Hash       `json:"hash"`
		LogsBloom        types.Bloom       `json:"logsBloom"`
		Miner            common.Address    `json:"miner"`
		MixHash          *common.Hash      `json:"mixHash,omitempty"`
		Nonce            *types.BlockNonce `json:"nonce,omitempty"`
		Number           *hexutil.Big      `json:"number"         gencodec:"required"`
		ParentHash       common.Hash       `json:"parentHash"`
		ReceiptsRoot     common.Hash       `json:"receiptsRoot"`
		Size             hexutil.Uint64    `json:"size"`
		StateRoot        common.Hash       `json:"stateRoot"`
		Timestamp        hexutil.Uint64    `json:"timestamp"`
		TotalDifficulty  *hexutil.Big      `json:"totalDifficulty,omitempty"`
		Transactions     TxOrHashList      `json:"transactions"`
		TransactionsRoot common.Hash       `json:"transactionsRoot"`
		Uncles           []common.Hash     `json:"uncles"`
		Sha3Uncles       common.Hash       `json:"sha3Uncles"`
	}
	var enc Block
	enc.BaseFeePerGas = (*hexutil.Big)(b.BaseFeePerGas)
	enc.Difficulty = (*hexutil.Big)(b.Difficulty)
	enc.ExtraData = b.ExtraData
	enc.GasLimit = hexutil.Uint64(b.GasLimit)
	enc.GasUsed = hexutil.Uint64(b.GasUsed)
	enc.Hash = b.Hash
	enc.LogsBloom = b.LogsBloom
	enc.Miner = b.Miner
	enc.MixHash = b.MixHash
	enc.Nonce = b.Nonce
	enc.Number = (*hexutil.Big)(b.Number)
	enc.ParentHash = b.ParentHash
	enc.ReceiptsRoot = b.ReceiptsRoot
	enc.Size = hexutil.Uint64(b.Size)
	enc.StateRoot = b.StateRoot
	enc.Timestamp = hexutil.Uint64(b.Timestamp)
	enc.TotalDifficulty = (*hexutil.Big)(b.TotalDifficulty)
	enc.Transactions = b.Transactions
	enc.TransactionsRoot = b.TransactionsRoot
	enc.Uncles = b.Uncles
	enc.Sha3Uncles = b.Sha3Uncles
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *Block) UnmarshalJSON(input []byte) error {
	type Block struct {
		BaseFeePerGas    *hexutil.Big      `json:"baseFeePerGas,omitempty"`
		Difficulty       *hexutil.Big      `json:"difficulty"     gencodec:"required"`
		ExtraData        *hexutil.Bytes    `json:"extraData"`
		GasLimit         *hexutil.Uint64   `json:"gasLimit"`
		GasUsed          *hexutil.Uint64   `json:"gasUsed"`
		Hash             *common.Hash      `json:"hash"`
		LogsBloom        *types.Bloom      `json:"logsBloom"`
		Miner            *common.Address   `json:"miner"`
		MixHash          *common.Hash      `json:"mixHash,omitempty"`
		Nonce            *types.BlockNonce `json:"nonce,omitempty"`
		Number           *hexutil.Big      `json:"number"         gencodec:"required"`
		ParentHash       *common.Hash      `json:"parentHash"`
		ReceiptsRoot     *common.Hash      `json:"receiptsRoot"`
		Size             *hexutil.Uint64   `json:"size"`
		StateRoot        *common.Hash      `json:"stateRoot"`
		Timestamp        *hexutil.Uint64   `json:"timestamp"`
		TotalDifficulty  *hexutil.Big      `json:"totalDifficulty,omitempty"`
		Transactions     *TxOrHashList     `json:"transactions"`
		TransactionsRoot *common.Hash      `json:"transactionsRoot"`
		Uncles           []common.Hash     `json:"uncles"`
		Sha3Uncles       *common.Hash      `json:"sha3Uncles"`
	}
	var dec Block
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BaseFeePerGas != nil {
		b.BaseFeePerGas = (*big.Int)(dec.BaseFeePerGas)
	}
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Block")
	}
	b.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.ExtraData != nil {
		b.ExtraData = *dec.ExtraData
	}
	if dec.GasLimit != nil {
		b.GasLimit = uint64(*dec.GasLimit)
	}
	if dec.GasUsed != nil {
		b.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.Hash != nil {
		b.Hash = *dec.Hash
	}
	if dec.LogsBloom != nil {
		b.LogsBloom = *dec.LogsBloom
	}
	if dec.Miner != nil {
		b.Miner = *dec.Miner
	}
	if dec.MixHash != nil {
		b.MixHash = dec.MixHash
	}
	if dec.Nonce != nil {
		b.Nonce = dec.Nonce
	}
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Block")
	}
	b.Number = (*big.Int)(dec.Number)
	if dec.ParentHash != nil {
		b.ParentHash = *dec.ParentHash
	}
	if dec.ReceiptsRoot != nil {
		b.ReceiptsRoot = *dec.ReceiptsRoot
	}
	if dec.Size != nil {
		b.Size = uint64(*dec.Size)
	}
	if dec.StateRoot != nil {
		b.StateRoot = *dec.StateRoot
	}
	if dec.Timestamp != nil {
		b.Timestamp = uint64(*dec.Timestamp)
	}
	if dec.TotalDifficulty != nil {
		b.TotalDifficulty = (*big.Int)(dec.TotalDifficulty)
	}
	if dec.Transactions != nil {
		b.Transactions = *dec.Transactions
	}
	if dec.TransactionsRoot != nil {
		b.TransactionsRoot = *dec.TransactionsRoot
	}
	if dec.Uncles != nil {
		b.Uncles = dec.Uncles
	}
	if dec.Sha3Uncles != nil {
		b.Sha3Uncles = *dec.Sha3Uncles
	}
	return nil
}
