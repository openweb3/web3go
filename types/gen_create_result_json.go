// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*createResultMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c CreateResult) MarshalJSON() ([]byte, error) {
	type CreateResult struct {
		GasUsed *hexutil.Big   `json:"gasUsed"`
		Code    hexutil.Bytes  `json:"code"`
		Address common.Address `json:"address"`
	}
	var enc CreateResult
	enc.GasUsed = (*hexutil.Big)(c.GasUsed)
	enc.Code = c.Code
	enc.Address = c.Address
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *CreateResult) UnmarshalJSON(input []byte) error {
	type CreateResult struct {
		GasUsed *hexutil.Big    `json:"gasUsed"`
		Code    *hexutil.Bytes  `json:"code"`
		Address *common.Address `json:"address"`
	}
	var dec CreateResult
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.GasUsed != nil {
		c.GasUsed = (*big.Int)(dec.GasUsed)
	}
	if dec.Code != nil {
		c.Code = *dec.Code
	}
	if dec.Address != nil {
		c.Address = *dec.Address
	}
	return nil
}
