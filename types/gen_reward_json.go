// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*rewardMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Reward) MarshalJSON() ([]byte, error) {
	type Reward struct {
		Author     common.Address `json:"author"`
		Value      *hexutil.Big   `json:"value"`
		RewardType RewardType     `json:"rewardType"`
	}
	var enc Reward
	enc.Author = r.Author
	enc.Value = (*hexutil.Big)(r.Value)
	enc.RewardType = r.RewardType
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Reward) UnmarshalJSON(input []byte) error {
	type Reward struct {
		Author     *common.Address `json:"author"`
		Value      *hexutil.Big    `json:"value"`
		RewardType *RewardType     `json:"rewardType"`
	}
	var dec Reward
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Author != nil {
		r.Author = *dec.Author
	}
	if dec.Value != nil {
		r.Value = (*big.Int)(dec.Value)
	}
	if dec.RewardType != nil {
		r.RewardType = *dec.RewardType
	}
	return nil
}
