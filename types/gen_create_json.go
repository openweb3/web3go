// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*createMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c Create) MarshalJSON() ([]byte, error) {
	type Create struct {
		From  common.Address `json:"from"`
		Value *hexutil.Big   `json:"value"`
		Gas   *hexutil.Big   `json:"gas"`
		Init  hexutil.Bytes  `json:"init"`
	}
	var enc Create
	enc.From = c.From
	enc.Value = (*hexutil.Big)(c.Value)
	enc.Gas = (*hexutil.Big)(c.Gas)
	enc.Init = c.Init
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *Create) UnmarshalJSON(input []byte) error {
	type Create struct {
		From  *common.Address `json:"from"`
		Value *hexutil.Big    `json:"value"`
		Gas   *hexutil.Big    `json:"gas"`
		Init  *hexutil.Bytes  `json:"init"`
	}
	var dec Create
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.From != nil {
		c.From = *dec.From
	}
	if dec.Value != nil {
		c.Value = (*big.Int)(dec.Value)
	}
	if dec.Gas != nil {
		c.Gas = (*big.Int)(dec.Gas)
	}
	if dec.Init != nil {
		c.Init = *dec.Init
	}
	return nil
}
