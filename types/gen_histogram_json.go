// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*histogramMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Histogram) MarshalJSON() ([]byte, error) {
	type Histogram struct {
		BucketBounds []*hexutil.Big `json:"bucketBounds"`
		Counts       []uint         `json:"counts"`
	}
	var enc Histogram
	if h.BucketBounds != nil {
		enc.BucketBounds = make([]*hexutil.Big, len(h.BucketBounds))
		for k, v := range h.BucketBounds {
			enc.BucketBounds[k] = (*hexutil.Big)(v)
		}
	}
	enc.Counts = h.Counts
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Histogram) UnmarshalJSON(input []byte) error {
	type Histogram struct {
		BucketBounds []*hexutil.Big `json:"bucketBounds"`
		Counts       []uint         `json:"counts"`
	}
	var dec Histogram
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.BucketBounds != nil {
		h.BucketBounds = make([]*big.Int, len(dec.BucketBounds))
		for k, v := range dec.BucketBounds {
			h.BucketBounds[k] = (*big.Int)(v)
		}
	}
	if dec.Counts != nil {
		h.Counts = dec.Counts
	}
	return nil
}
