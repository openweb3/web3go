// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*suicideMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s Suicide) MarshalJSON() ([]byte, error) {
	type Suicide struct {
		Address       common.Address `json:"address"`
		RefundAddress common.Address `json:"refundAddress"`
		Balance       *hexutil.Big   `json:"balance"`
	}
	var enc Suicide
	enc.Address = s.Address
	enc.RefundAddress = s.RefundAddress
	enc.Balance = (*hexutil.Big)(s.Balance)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *Suicide) UnmarshalJSON(input []byte) error {
	type Suicide struct {
		Address       *common.Address `json:"address"`
		RefundAddress *common.Address `json:"refundAddress"`
		Balance       *hexutil.Big    `json:"balance"`
	}
	var dec Suicide
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Address != nil {
		s.Address = *dec.Address
	}
	if dec.RefundAddress != nil {
		s.RefundAddress = *dec.RefundAddress
	}
	if dec.Balance != nil {
		s.Balance = (*big.Int)(dec.Balance)
	}
	return nil
}
