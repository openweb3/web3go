// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*callResultMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (c CallResult) MarshalJSON() ([]byte, error) {
	type CallResult struct {
		GasUsed *hexutil.Big  `json:"gasUsed"`
		Output  hexutil.Bytes `json:"output"`
	}
	var enc CallResult
	enc.GasUsed = (*hexutil.Big)(c.GasUsed)
	enc.Output = c.Output
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (c *CallResult) UnmarshalJSON(input []byte) error {
	type CallResult struct {
		GasUsed *hexutil.Big   `json:"gasUsed"`
		Output  *hexutil.Bytes `json:"output"`
	}
	var dec CallResult
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.GasUsed != nil {
		c.GasUsed = (*big.Int)(dec.GasUsed)
	}
	if dec.Output != nil {
		c.Output = *dec.Output
	}
	return nil
}
