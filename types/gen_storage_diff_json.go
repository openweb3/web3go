// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*StorageDiffMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s StorageDiff) MarshalJSON() ([]byte, error) {
	type StorageDiff struct {
		Key *hexutil.Big `json:"key"`
		Val *hexutil.Big `json:"val"`
	}
	var enc StorageDiff
	enc.Key = (*hexutil.Big)(s.Key)
	enc.Val = (*hexutil.Big)(s.Val)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *StorageDiff) UnmarshalJSON(input []byte) error {
	type StorageDiff struct {
		Key *hexutil.Big `json:"key"`
		Val *hexutil.Big `json:"val"`
	}
	var dec StorageDiff
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Key != nil {
		s.Key = (*big.Int)(dec.Key)
	}
	if dec.Val != nil {
		s.Val = (*big.Int)(dec.Val)
	}
	return nil
}
